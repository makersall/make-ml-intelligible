---
layout: content
title: The 7 Principles for Growing a Thriving Data Chefs Ecosystem
image: sandwich-rustic.jpg
---

## Don't Create a Solution, Grow an Ecosystem

- It's easy to get sucked in by vendors or evangelists who tell you that their tool, language, or platform will solve all your problems. But for most organizations, one size doesn't fit all.
- At the same time, you don't want to let users and then managers create a snarled rat's nest of solutions that's impossible to maintain or support. You need find a balance between chaos and order.
May want 2 sets of rules.  For example, on the trail vs off the trail -- folks who have more latitude but don't get support if they get into trouble
- Given how fast analytics/data science tools and users' expectations are changing, trying to plan it all out is a recipe for disaster. Instead of trying to create a single solution, think of it as growing an ecosystem that will evolve and adapt to new circumstances.


## Continuously Smooth the Learning Curve
- 
- For example, using AutoML today is like microwaving a Hot Pocket: users don't understand the assumptions and implicit decisions underlying the tools they're using. As autoML becomes important to organizations' success, this is not sustainable.  

## Harness the Power of Community
This is particularly tricky because there isn't just one type of power user. Some power users may have had a class in a particular skill a year ago but are only actively using it a few times a year. For example:
A report script they use once a month but only need to tweak 2 to 3 times a year
Every once in a while, they have a new analysis that requires them to be able to tweak the data in a way that wasn't anticipated and where getting the data fixed/cleaned up by that database developers, who have a lot on their plate, will take too long
And then there's nurturing folks.
Because the reality is,
sending someone through one training isn't going to cut it.
You're going to have to entice people,
get some folks interested,
show off what they can do,
then have folks take some baby steps.
And then help them as they get stuck
having a bunch of buddies who can help you out,
and can also help you deal with the emotional issues, like trusting yourself
Cross department team to evangelize, support, make some types of decisions
Retention strategy
Start w core of folks -- ideally folks who are a little more skilled and are easy to work with and have supportive departments
Manage expectations -- both hype and skepticism
Making sure people get that data wrangling is key  -- e.g., 80% of ML project is consolidating and cleaning up data
Make sure ok with iterative approach
Executive buy-in: don't need to start with it, but you do need to get it to succeed


## Adapt Agile Development Practices to Fit Power Users' Needs
it may just be a team of 1 (hire unknown's?) (You may also be the product owner/co-owner
At least rudimentary lifecycle management. Organizations need to develop standards, processes, templates, etc., as well as training and mentoring to nurture this capacity
figure out how to overcome resistance they'll inevitably encounter from many departments
- setting expectations so that citizen data scientists don't end up promising more than they can deliver

## Grow An Agile Data Infrastructure
At least rudimentary lifecycle management. Organizations need to develop standards, processes, templates, etc., as well as training and mentoring to nurture this capacity
figure out how to overcome resistance they'll inevitably encounter from many departments
but that's only one part of the story
there's version control: how do I make sure that if I make mistakes I can roll it back?
There stating standards
so that if one data scientists is out for a bit somebody else can step in
even basic things like how your files organized
or
what you call things?
What kind of assumptions did you make when you chose your data?
What date field did you choose for analyzing that sales data?
there's a bunch of bad data in here that I didn't realize that was there
because the reports I use have been designed to hide it or they don't show up because of the criteria that they are used
Enterprises can't have lots of successful power users without a solid data foundation -- and in the real world, that requires skilled data engineers.  But how do you do this without drowning in it?  If you don't have a strategy and set expectations
Agile Data Governance: Do it like scrum -- not everything, but backlog list


## Design in Diversity from the Ground Up


## Encourage Play
